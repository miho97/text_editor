<Window x:Class="TextEditorApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:rp="clr-namespace:RoslynPad.Editor;assembly=RoslynPad.Editor.Windows"
        xmlns:behaviours="clr-namespace:TextEditorApp.MainWindows.Behaviours"
        xmlns:behaviors="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:local="clr-namespace:TextEditorApp" 
        xmlns:enum="clr-namespace:TextEditorApp.Common.Enums;assembly=TextEditorApp.Common" 
        xmlns:i1="clr-namespace:Microsoft.VisualBasic;assembly=Microsoft.VisualBasic"
        xmlns:web="clr-namespace:CefSharp.Wpf;assembly=CefSharp.Wpf"
        xmlns:controls="clr-namespace:TextEditorApp.Controls.ControlsModels;assembly=TextEditorApp.Controls" 
        mc:Ignorable="d"
        Title="TextEditor"
        WindowState="Maximized">
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <i:CallMethodAction TargetObject="{Binding}" MethodName="OnWindowClosing" />
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Window.Resources>
        <enum:EnumToBoolConverter x:Key="EnumConverter" />
    </Window.Resources>
    <DockPanel Margin="1">
        <Ribbon DockPanel.Dock="Top" Height="135">
            <!-- Application Menu -->
            <Ribbon.ApplicationMenu>
                <RibbonApplicationMenu SmallImageSource="../Resources/Images/AppMenu.png" KeyTip="F">
                    <RibbonApplicationMenuItem ImageSource="../Resources/Images/File.png" KeyTip="N" Header="New" Command="{Binding NewFileCommand}"/>
                    <RibbonApplicationMenuItem ImageSource="../Resources/Images/OpenFile.png" KeyTip="O" Header="Open" Command="{Binding OpenFileCommand}"/>
                    <RibbonApplicationMenuItem ImageSource="../Resources/Images/Save.png" KeyTip="O" Header="Save" Command="{Binding SaveFileCommand}"/>
                    <RibbonApplicationMenuItem ImageSource="../Resources/Images/SaveFileAs.png" Header="Save As..." Command="{Binding SaveFileAsCommand}"/>
                    <RibbonSeparator />
                    <RibbonApplicationMenuItem ImageSource="../Resources/Images/Print.png" Header="Print" Command="{Binding PrintCommand}"/>
                </RibbonApplicationMenu>
            </Ribbon.ApplicationMenu>

            <!--Clipboard options-->

            <RibbonTab Header="Home">
                <RibbonGroup Header="Clipboard">
                    <RibbonButton Label="Paste" LargeImageSource="../Resources/Images/Paste.png" Command="{Binding OnPasteCommand}"/>
                    <RibbonButton Label="Cut" SmallImageSource="../Resources/Images/Cut.png" Command="{Binding OnCutCommand}"/>
                    <RibbonButton Label="Copy" SmallImageSource="../Resources/Images/Copy.png" Command="{Binding OnCopyCommand}"/>
                </RibbonGroup>
                <RibbonGroup Header="Text Alignment">
                    <RibbonControlGroup>
                        <RibbonRadioButton SmallImageSource="../Resources/Images/Alignment/alignLeft.png" 
                                           IsChecked="{Binding HorizontalTextAlignment, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static enum:CustomHorizontalTextAlignment.Left}}"
                                           Command="{Binding OnAlignCommand}" CommandParameter="{x:Static enum:CustomHorizontalTextAlignment.Left}"/>
                        <RibbonRadioButton SmallImageSource="../Resources/Images/Alignment/alignCenter.png" 
                                           IsChecked="{Binding HorizontalTextAlignment, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static enum:CustomHorizontalTextAlignment.Centered}}"
                                           Command="{Binding OnAlignCommand}" CommandParameter="{x:Static enum:CustomHorizontalTextAlignment.Centered}"/>
                        <RibbonRadioButton SmallImageSource="../Resources/Images/Alignment/alignRight.png" 
                                           IsChecked="{Binding HorizontalTextAlignment, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static enum:CustomHorizontalTextAlignment.Right}}"
                                           Command="{Binding OnAlignCommand}" CommandParameter="{x:Static enum:CustomHorizontalTextAlignment.Right}"/>
                        <RibbonRadioButton SmallImageSource="../Resources/Images/Alignment/alignJustify.png" 
                                           IsChecked="{Binding HorizontalTextAlignment, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static enum:CustomHorizontalTextAlignment.Justified}}"
                                           Command="{Binding OnAlignCommand}" CommandParameter="{x:Static enum:CustomHorizontalTextAlignment.Justified}"/>
                    </RibbonControlGroup>
                </RibbonGroup>
                <RibbonGroup Header="Font format">
                    <StackPanel Orientation="Horizontal">
                        <ComboBox x:Name="FontFamilyComboBox" Width="90" VerticalAlignment="Center" HorizontalAlignment="Left"
ItemsSource="{Binding FontFamilies}" Text="{Binding ChosenFontFamily.Fontfamily, Mode=TwoWay, UpdateSourceTrigger=Default}" IsEditable="False" IsTextSearchEnabled="True">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="SelectionChanged">
                                    <i:InvokeCommandAction Command="{Binding OnFontFamilyChanged}" PassEventArgsToCommand="True" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding FontfamilyString}" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                        <ComboBox x:Name="FontSizeComboBox"  Width="50" StaysOpenOnEdit="True"  VerticalAlignment="Center" HorizontalAlignment="Left"
    ItemsSource="{Binding FontSizes}" IsEditable="True" IsTextSearchEnabled="False"
          Text="{Binding SelectedFontSize.FontSize, Mode=TwoWay, UpdateSourceTrigger=Default}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewKeyDown">
                                    <i:InvokeCommandAction Command="{Binding FilterKeysUntilEnter}" PassEventArgsToCommand="True" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="SelectionChanged">
                                    <i:InvokeCommandAction Command="{Binding OnChangeFontSize}" PassEventArgsToCommand="True" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding FontSizeText}" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </StackPanel>
                </RibbonGroup>
                <RibbonGroup Header="Languages">
                    <ComboBox x:Name="DocumentLanguage" Width="150" VerticalAlignment="Center" HorizontalAlignment="Left"
ItemsSource="{Binding DocumentLanguages}" Text="{Binding ChosenLanguage.SelectedLanguage, Mode=TwoWay, UpdateSourceTrigger=Default}" IsEditable="False" IsTextSearchEnabled="True">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="SelectionChanged">
                                <i:InvokeCommandAction Command="{Binding OnLanguageChanged}" PassEventArgsToCommand="True" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding }" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </RibbonGroup>
                <RibbonGroup Header="Intellisense">
                    <RibbonToggleButton Label="Enable Code Completition" HorizontalAlignment="Center"  IsChecked="{Binding IsCodeCompletitionEnabled, Mode=TwoWay, UpdateSourceTrigger=Default}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Checked">
                                <i:InvokeCommandAction Command="{Binding OnCodeCompletitionCommand}" PassEventArgsToCommand="True"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="Unchecked">
                                <i:InvokeCommandAction Command="{Binding OnCodeCompletitionCommand}" PassEventArgsToCommand="True"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </RibbonToggleButton>
                    <RibbonSeparator/>
                    <RibbonToggleButton Label="Show Line Numbers" HorizontalAlignment="Center" IsChecked="{Binding IsShowLineNumbers, Mode=TwoWay, UpdateSourceTrigger=Default}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <i:InvokeCommandAction Command="{Binding OnShowLineNumbersChanged}" PassEventArgsToCommand="True"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </RibbonToggleButton>
                </RibbonGroup>
            </RibbonTab>

            <!-- Settings -->
            <RibbonMenuButton Label="Settings">
                <RibbonMenuItem Header="Edit Preferences"/>
                <RibbonMenuItem Header="Theme Settings"/>
                <!-- More settings options -->
            </RibbonMenuButton>

            <!-- Find & Replace -->
            <RibbonMenuButton Label="Find Replace">
                <RibbonMenuItem Header="Find"/>
                <RibbonMenuItem Header="Replace"/>
                <!-- Additional options for Find & Replace -->
            </RibbonMenuButton>

        </Ribbon>

        <!-- Main Content Area -->
        <DockPanel LastChildFill="True">
            <Grid DockPanel.Dock="Left">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="60*"/>
                </Grid.ColumnDefinitions>
                <DockPanel DockPanel.Dock="Left" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" MinWidth="882">
                    <TabControl DockPanel.Dock="Left" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" x:Name="MainTabControl" ItemsSource="{Binding _MainTabControl}" >
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="SelectionChanged">
                                <i:InvokeCommandAction Command="{Binding OnTabSelectionChanged}" PassEventArgsToCommand="True" />
                            </i:EventTrigger>
                            <i:EventTrigger EventName="Loaded">
                                <i:InvokeCommandAction Command="{Binding OnTabSelectionChanged}" PassEventArgsToCommand="True" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <!--<TabItem Header="File 1">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseRightButtonDown">
                                <i:InvokeCommandAction Command="{Binding OnRemoveTabCommand}" PassEventArgsToCommand="True"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <DockPanel>
                                --><!--<controls:CustomTextEditorModel x:Name="editor"
                                             DockPanel.Dock="Top"  
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch" 
                                                              />--><!--
                            <TextBlock Text="{Binding Result}" TextWrapping="Wrap" />

                        </DockPanel>
                    </TabItem>-->
                    <!-- Additional TabItems can be added here -->
                </TabControl>
            </DockPanel>
            </Grid>

            <DockPanel DockPanel.Dock="Right" MaxWidth="500" Margin="5,20,5,5">
                <DockPanel DockPanel.Dock="Top"  Margin="2,2,2,2" Width="Auto">
                    <Button DockPanel.Dock="Top" Content="Back" Command="{Binding WebBrowser.BackCommand, ElementName=Browser}" Width="Auto">
                        <Button.Resources>
                            <Style TargetType="Border">
                                <Setter Property="CornerRadius" Value="5"/>
                            </Style>
                        </Button.Resources>
                    </Button>
                    <Button DockPanel.Dock="Top" Content="Forward" Command="{Binding WebBrowser.ForwardCommand, ElementName=Browser}"  Width="Auto">
                        <Button.Resources>
                            <Style TargetType="Border">
                                <Setter Property="CornerRadius" Value="5"/>
                            </Style>
                        </Button.Resources>
                    </Button>
                    <TextBox DockPanel.Dock="Top" x:Name="txtBoxAddress" Text="{Binding Address, ElementName=Browser, FallbackValue=www.google.com}" FontSize="12" BorderBrush="Gray" BorderThickness="1">
                        <behaviors:Interaction.Behaviors>
                            <behaviours:TextBoxBindingUpdateOnEnterBehaviour/>
                        </behaviors:Interaction.Behaviors>
                        <TextBox.Resources>
                            <Style TargetType="Border">
                                <Setter Property="CornerRadius" Value="5"/>
                            </Style>
                        </TextBox.Resources>
                    </TextBox>
                    <ProgressBar DockPanel.Dock="Top" IsIndeterminate="{Binding IsLoading, ElementName=Browser}"
                                HorizontalAlignment="Stretch"
                                 VerticalAlignment="Stretch"
                                 Height="5"
                                 Visibility="Visible"
                                 BorderThickness="0"
                                >
                        <ProgressBar.Resources>
                            <Style TargetType="Border">
                                <Setter Property="CornerRadius" Value="5"/>
                            </Style>
                        </ProgressBar.Resources>
                    </ProgressBar>
                    <Border Grid.Row="1" BorderBrush="Gray" BorderThickness="0,1">
                        <web:ChromiumWebBrowser Margin="2,2,2,2" HorizontalAlignment="Stretch" x:Name="Browser" Address="www.google.com"/>
                    </Border>
                </DockPanel>
            </DockPanel>

        </DockPanel>
    </DockPanel>
</Window>