<Window x:Class="TextEditorApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:rp="clr-namespace:RoslynPad.Editor;assembly=RoslynPad.Editor.Windows"
        xmlns:local="clr-namespace:TextEditorApp" 
        xmlns:i1="clr-namespace:Microsoft.VisualBasic;assembly=Microsoft.VisualBasic"
        mc:Ignorable="d"
        Title="TextEditor" Height="450" Width="800">
    <DockPanel Margin="1">
        <Ribbon DockPanel.Dock="Top" Height="48">
            <!-- Application Menu -->
            <Ribbon.ApplicationMenu>
                <RibbonApplicationMenu KeyTip="F">
                    <RibbonApplicationMenuItem Header="New" Command="{Binding NewFileCommand}"/>
                    <RibbonApplicationMenuItem Header="Open" Command="{Binding OpenFileCommand}"/>
                    <RibbonApplicationMenuItem Header="Save" Command="{Binding SaveFileAsCommand}"/>
                    <RibbonApplicationMenuItem Header="Save As..." Command="{Binding SaveFileAsCommand}"/>
                </RibbonApplicationMenu>
            </Ribbon.ApplicationMenu>

            <!-- Format Options -->
            <RibbonMenuButton Label="Format">
                <RibbonMenuButton Label="Font">
                    <ComboBox x:Name="FontFamilyComboBox" Width="60" VerticalAlignment="Center" HorizontalAlignment="Left"
              ItemsSource="{Binding FontFamilies}" IsEditable="False" IsTextSearchEnabled="True">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="SelectionChanged">
                                <i:InvokeCommandAction Command="{Binding OnFontFamilyChanged}" PassEventArgsToCommand="True" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding FontfamilyString}" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </RibbonMenuButton>
                <RibbonMenuButton Label="Font size">
                    <ComboBox x:Name="FontSizeComboBox" IsDropDownOpen="True"  Width="60" StaysOpenOnEdit="True"  VerticalAlignment="Center" HorizontalAlignment="Left"
                        ItemsSource="{Binding FontSizes}" IsEditable="True" IsTextSearchEnabled="False"
                              Text="{Binding SelectedFontSize, Mode=TwoWay, UpdateSourceTrigger=Default}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewKeyDown">
                                <i:InvokeCommandAction Command="{Binding FilterKeysUntilEnter}" PassEventArgsToCommand="True" />
                            </i:EventTrigger>
                            <i:EventTrigger EventName="SelectionChanged">
                                <i:InvokeCommandAction Command="{Binding OnChangeFontSize}" PassEventArgsToCommand="True" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding FontSizeText}" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </RibbonMenuButton>
                <!-- Popup for changing font size -->
                <!--Popup x:Name="FontSizePopup" Placement="MousePoint" StaysOpen="False"-->
                    <!--TextBox x:Name="FontSizeInput" Width="50" KeyDown="FontSizeInput_KeyDown"/-->
                <!--/Popup-->
                <RibbonMenuItem Header="Read-only mode"/>
                <!-- More format options -->
            </RibbonMenuButton>

            <!-- Settings -->
            <RibbonMenuButton Label="Settings">
                <RibbonMenuItem Header="Edit Preferences"/>
                <RibbonMenuItem Header="Theme Settings"/>
                <RibbonMenuItem Header="Language"/>
                <!-- More settings options -->
            </RibbonMenuButton>

            <!-- C# Highlighting -->
            <RibbonMenuButton Label="C# sharp Highlighting">
                <RibbonMenuItem Header="Enable Highlighting" Command="{Binding OnEnableHighlighting}"/>
                <RibbonMenuItem Header="Disable Highlighting" Command="{Binding OnDisableHighlighting}"/>
                <!-- Additional options for C# highlighting -->
            </RibbonMenuButton>

            <!-- Find & Replace -->
            <RibbonMenuButton Label="Find Replace">
                <RibbonMenuItem Header="Find"/>
                <RibbonMenuItem Header="Replace"/>
                <!-- Additional options for Find & Replace -->
            </RibbonMenuButton>

        </Ribbon>

        <!-- Main Content Area -->
        <DockPanel>
            <TabControl x:Name="MainTabControl" ItemsSource="{Binding _MainTabControl}">
                <TabItem Header="File 1">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PreviewMouseRightButtonDown">
                            <i:InvokeCommandAction Command="{Binding OnRemoveTabCommand}" PassEventArgsToCommand="True"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <DockPanel>
                        <rp:RoslynCodeEditor x:Name="editor"
                                                                Loaded="OnMainWindowLoaded"
                                                              FontFamily="Consolas"
                                                              Margin="5"
                                                              ShowLineNumbers="False"
                                                                IsReadOnly="False"
                                             DockPanel.Dock="Top"  
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch" 
                                                              />
                        <TextBlock Text="{Binding Result}" TextWrapping="Wrap" />

                    </DockPanel>
                </TabItem>
                <!-- Additional TabItems can be added here -->
            </TabControl>
        </DockPanel>
    </DockPanel>
</Window>